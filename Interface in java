Functional Interface using lambda Function

package FunInterfce;
@FunctionalInterface

interface Predicate<T> {
	boolean test(T t);
}
public class OneAbtrctMtds {
	public static void main(String[] args) {
		Predicate<Integer> iseven = (Integer val) -> {
			if (val%2 == 0) {
				System.out.println("True");
				return true;
			}else {
				System.out.println("False");
				return false;
			}
			
		};
		iseven.test(7);
		iseven.test(8);
	
	}
}


There are 4 types of FunctionalInterface 
1.Function -> Represent function, that accept one argument process it and produce a result
2.Consumer -> Represent an opertaion, that accept a single input parameter and returns no result
3.Predicate -> Boolean(as mentioned in above code)
4.Supplier ->  Represent the supplier of the result, Accepts no input parameter but produce a result
